import os
import sys
import random
import json
import numpy as np
from ast import literal_eval 





def generate_csv(path,type = 0):
	folder_list = os.listdir(path)
	random.shuffle(folder_list)
	folder_list=folder_list[:]
	csv_list=[]
	apis = ['Arial\n','AutoSize\n','Align\n','Action\n','IDATx\n','GetProcAddress\n','AOwner\n',
	'Anchors\n','VirtualAlloc\n','ToArray\n','GetProcAddress\n','GetModuleHandleA\n','LocalAlloc\n',
	'LoadLibraryA\n','August\n','April\n','NetApiBufferFree\n','RtlAllocateHeap\n','GlobalAlloc\n',
	'RtlInitAnsiString\n','AOwner\n','AObject\n','Assign\n','AIndex\n','TAction\n','AValue\n','ACount\n',
	'AList\n','ADictionary\n','AControl\n','NetapipBufferAllocate\n','NetApiBufferReallocate\n',
	'NetApiBufferAllocate\n','oAupV\n','ToAnsiS\n','AryDeru\n','IsCharAlphaNumericW\n','NetShareAdd\n',
	'NetUserAdd\n','SetJobA\n']

	for folder in folder_list:
		try:
			l=[0 for i in range(67)]
			if type == 1:
				l[66]=1
			for file in os.listdir(os.path.join(path,folder)):
				c=0
				if file=='Structure_Info.txt':
					l[0]=(os.stat(os.path.join(path,folder)+"/"+file).st_size)
					f = open(os.path.join(path,folder)+"/"+file)
					p = []
					try:
						for line in f:
							#print(line)
						 	if line.startswith('0x') and len(line.split())==4:
						 		p.append([line.split()[2],line.split()[3]])
					except: 
						print(str(folder)+" File contains unparsable characters. Feature vector will be default.\n")
						c=1
						continue
					for k in p:
						if k[0]=='SizeOfCode:':
							l[1]=(literal_eval(k[1]))
						if k[0]=='SizeOfInitializedData:':
							l[2]=(literal_eval(k[1]))
						if k[0]=='SizeOfUninitializedData:':
							l[3]=(literal_eval(k[1]))
						if k[0]=='SizeOfImage:':
							l[4]=(literal_eval(k[1]))
						if k[0]=='SizeOfHeaders:':
							l[5]=(literal_eval(k[1]))
						if k[0]=='DllCharacteristics:':
							l[6]=(literal_eval(k[1]))
						if k[0]=='SizeOfStackReserve:':
							l[7]=(literal_eval(k[1]))
					
					for k in p:
						if k[1]=='UPX0':
							l[9]=1
						if k[1]=='UPX1':
							l[10]=1
						if k[1]=='UPX2':
							l[11]=1
					i = 12
					for k in p:
						if k[0]=='Misc_PhysicalAddress:' and i<16:
							l[i]=(literal_eval(k[1]))
							i+=1
					i = 16
					for k in p:
						if k[0]=='Misc_VirtualSize:' and i<20:
							l[i]=(literal_eval(k[1]))
							i+=1
					i = 20
					for k in p:
						if k[0]=='SizeOfRawData:' and i<24:
							l[i]=(literal_eval(k[1]))
							i+=1
				if file=='String.txt' and c==0:
					f = open(os.path.join(path,folder)+"/"+file)
					i=26
					strings = []
					for line in f:
						strings.append(line)
					for j in apis:
						l[i]=strings.count(j)
						i+=1
					l[24]=l[0]=(os.stat(os.path.join(path,folder)+"/"+file).st_size)
				if file=='Opcodes.txt':
					l[25]=(os.stat(os.path.join(path,folder)+"/"+file).st_size)
			for i in range(len(l)):
				if l[i]>10000:
					l[i]/=10000
		except:
			print("file-error "+str(folder)+" something went wrong with this file, continuing...")
			csv_list.append(l)
			continue
		csv_list.append(l)
	return csv_list



if __name__ == "__main__":
	csv_list = generate_csv(r"Benign",0)
	np.savetxt('benign_sample.csv', csv_list,fmt="%d", delimiter=",")
	csv_list = generate_csv(r"malwares",1)
	np.savetxt('malware_sample.csv', csv_list,fmt="%d", delimiter=",")
